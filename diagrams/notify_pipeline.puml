@startuml notify_pipeline
skinparam WrapWidth 5
autonumber


participant external as "External" #LightBlue
database notify_requests as "Notify\nRequests DB"
participant api as "Notify API"

database notify_task_queue as "Notify\nTask\nQueue"
database dead_letter_queue as "Dead\nLetter\nQueue"

box "User providing" #LightCyan
participant user_provider as "User\nProvider"
database user_provided_queue as "User\nProvided\nQueue"
end box

box "Content prividing" #LightGreen
participant content_provider as "Content\nprovider"
database content_provided_queue as "Content\nProvided\nQueue"
end box

participant email_sender as "Email Sender"

actor customer as "Customer"

external -> api: Notify Task
activate api
api -> notify_task_queue
api -> notify_requests: Pending
api -> external: HTTP Accepted, notify-id
deactivate api

notify_task_queue -> user_provider
alt ok
    user_provider -> user_provided_queue
else error
    user_provider -> notify_requests: User Provision Error
end
user_provided_queue -> content_provider

alt ok
    content_provider -> content_provided_queue
else error
    content_provider -> notify_requests: Content Provision Error
end

content_provided_queue -> email_sender 
email_sender -> customer
alt ok 
    email_sender -> notify_requests: Success send
else error
    email_sender -> notify_requests: Send error
    email_sender -> dead_letter_queue: Put to dead letter queue
end

dead_letter_queue -> notify_task_queue: Resend dead letter

@enduml